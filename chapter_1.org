* Exercise 1.1
  Below is a sequence of expressions.  What is the
  result printed by the interpreter in response to each expression?
  Assume that the sequence is to be evaluated in the order in which
  it is presented.

  #+BEGIN_SRC scheme
    10
    ; result: 10
    (+ 5 3 4)
    ; result: 12
    (- 9 1)
    ; result: 8
    (/ 6 2)
    ; result: 3
    (+ (* 2 4) (- 4 6))
    ; result: 6

    (define a 3)
    ; result: a = 3

    (define b (+ a 1))
    ; result: b = 4

    (+ a b (* a b))
    ; result: 19

    (= a b)
    ; result: #f

    (if (and (> b a) (< b (* a b)))
        b
        a)
    ; result: 4, return b

    (cond ((= a 4) 6)
          ((= b 4) (+ 6 7 a))
          (else 25))
    ; result: 16, second clause

    (+ 2 (if (> b a) b a))
    ; result: 6

    (* (cond ((> a b) a)
             ((< a b) b)
             (else -1))
       (+ a 1))
    ; result: 16
  #+END_SRC

* Exercise 1.2
  Translate the following expression into prefix
  form.

  \begin{equation}
  \frac{5 + 4 + (2 - (3 - (6 + \frac{4}{5})))}
       {3(6 - 2)(2 - 7)}
  \end{equation}

** Answer
  #+BEGIN_SRC scheme
    (/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
       (* 3 (- 6 2) (- 2 7)))
  #+END_SRC

* Exercise 1.3
  Define a procedure that takes three numbers as
  arguments and returns the sum of the squares of the two larger
  numbers.

** Answer
  #+BEGIN_SRC scheme
    (define (square n)
      (* n n))

    (define (sum-of-squares-of-two-larger-numbers x y z)
      (+ (if (> x y)
             (square x)
             (square y))
         (if (> y z)
             (square y)
             (square z))))
  #+END_SRC

* Exercise 1.4
  Observe that our model of evaluation allows for
  combinations whose operators are compound expressions.  Use this
  observation to describe the behavior of the following procedure:

  #+BEGIN_SRC scheme
    (define (a-plus-abs-b a b)
      ((if (> b 0) + -) a b))
  #+END_SRC

  The `if' statement return a procedure based on the sign of `b'.
  If `b' is positive the `if' returns the function `+' which result
  in the addition of `a' and `b'.

  On the other side, if `b' is negative the `if' returns the function
  `-' and therefore will result in the addition of `a' and the opposite
  of `b'.

* Exercise 1.5
  Ben Bitdiddle has invented a test to determine
  whether the interpreter he is faced with is using
  applicative-order evaluation or normal-order evaluation.  He  defines
  the following two procedures:

  #+BEGIN_SRC scheme
    (define (p) (p))

    (define (test x y)
      (if (= x 0)
          0
          y))

    (test 0 (p))
  #+END_SRC

  Then he evaluates the expression

  #+BEGIN_SRC scheme
    (test 0 (p))
  #+END_SRC

  What behavior will Ben observe with an interpreter that uses
  applicative-order evaluation?  What behavior will he observe with
  an interpreter that uses normal-order evaluation?  Explain your
  answer.  (Assume that the evaluation rule for the special form
  `if' is the same whether the interpreter is using normal or
  applicative order: The predicate expression is evaluated first,
  and the result determines whether to evaluate the consequent or
  the alternative expression.)

** Answer
*** applicative-order evaluation
    #+BEGIN_SRC scheme
      (if (= 0 0)
          0
          (p))
    #+END_SRC

    then

    #+BEGIN_SRC scheme
      (if (= 0 0)
          0
          ((p)))
    #+END_SRC

    and ...

    #+BEGIN_SRC scheme
      (if (= 0 0)
          0
          (((p)))) ; infinite loop
    #+END_SRC

    It will result in an infinite loop, `p' will always call himself
    recursively without any breaking statement.


*** normal-order evaluation
    #+BEGIN_SRC scheme
      (if (= 0 0)
          0
          (p))
    #+END_SRC

    then

    #+BEGIN_SRC scheme
      (if #t
          0
          (p))
    #+END_SRC

    and finally

    #+BEGIN_SRC scheme
      0
    #+END_SRC

* Exercise 1.6
  Alyssa P. Hacker doesn't see why `if' needs to be
  provided as a special form.  "Why can't I just define it as an
  ordinary procedure in terms of `cond'?" she asks.  Alyssa's friend
  Eva Lu Ator claims this can indeed be done, and she defines a new
  version of `if':

  #+BEGIN_SRC scheme
    (define (new-if predicate then-clause else-clause)
      (cond (predicate then-clause)
            (else else-clause)))
  #+END_SRC

  Eva demonstrates the program for Alyssa:

  #+BEGIN_SRC scheme
    (new-if (= 2 3) 0 5)
    ;; result: 5

    (new-if (= 1 1) 0 5)
    ;; result: 0
  #+END_SRC

  Delighted, Alyssa uses `new-if' to rewrite the square-root program:

  #+BEGIN_SRC scheme
    (define (sqrt-iter guess x)
      (new-if (good-enough? guess x)
              guess
              (sqrt-iter (improve guess x)
                         x)))
  #+END_SRC

  What happens when Alyssa attempts to use this to compute square
  roots?  Explain.

** Answer
   If the procedure `new-if` works as the special-form `if` the
   following statement should terminate immediately and return 1:

   #+BEGIN_SRC scheme
     (sqrt-iter 1 1)
   #+END_SRC

   Instead the process hangs and doesn't stop.

   The explication can be illustrated by expanding `sqrt-iter`
   using applicative-order evaluation or normal-order evulation
   (it doesn't matter which one, they will both encounter the same
   problem):

   #+BEGIN_SRC scheme
     ;; using applicative-order evaluation
     (new-if (good-enough? 1 1)
             1
             (sqrt-iter (improve 1 1)
                        1))
   #+END_SRC

   then

    #+BEGIN_SRC scheme
      (new-if #t
              1
              (sqrt-iter (improve 1 1)
                         1))
    #+END_SRC

   then

    #+BEGIN_SRC scheme
     (new-if #t
             1
             (sqrt-iter 1
                        1))

    #+END_SRC

   etc.

   #+BEGIN_SRC scheme
     (new-if #t
             1
             (new-if (good-enough? 1 1)
                     1
                     ; infinite loop
                     (sqrt-iter (improve 1 1)
                                1)))

   #+END_SRC

   When we use the procedure `new-if' the else-clause is
   evaluated whereas it is not necessary. In our case the
   recursive call of `sqrt-iter' will be expanded infinitely
   despite the fact that the predicate is true.

   If instead we use the special-form `if`, the else-clause is
   evaluated only if the predicate is false and therefore
   will not expand the recursive call of `sqrt-iter' when it
   is true.

* Exercise 1.7
  The `good-enough?' test used in computing square
  roots will not be very effective for finding the square roots of
  very small numbers.  Also, in real computers, arithmetic operations
  are almost always performed with limited precision.  This makes
  our test inadequate for very large numbers.  Explain these
  statements, with examples showing how the test fails for small and
  large numbers.  An alternative strategy for implementing
  `good-enough?' is to watch how `guess' changes from one iteration
  to the next and to stop when the change is a very small fraction
  of the guess.  Design a square-root procedure that uses this kind
  of end test.  Does this work better for small and large numbers?

** Answer
   As our procedure `good-enough?' set a tolerance of 0.001 we cannot
   compute square root of numbers smaller than 0.01 with a reasonable
   accuracy as we cannot even guarantee the correctness of the first
   significant digit.

   If we call `(sqrt 0.001)' we get the result 0.04124542607499115
   instead of 0.0316227766.
   The stacktrace of the computation is the following :

   #+BEGIN_SRC scheme
     ;; pass 1 (first call to sqrt-iter)
     sqrt-iter::guess - 1.0
     sqrt-iter::good-enough? - 0.999 ; #f
     ;; pass 2 (second call to sqrt-iter)
     sqrt-iter::guess - 0.5005
     sqrt-iter::good-enough? - 0.24950024999999992 ; #f
     ;; pass 3
     sqrt-iter::guess - 0.251249000999001
     sqrt-iter::good-enough? - 0.062126060502996 ; #f
     ;; pass 4
     sqrt-iter::guess - 0.12761455816345907
     sqrt-iter::good-enough? - 0.015285475455254875 ; #f
     ;; pass 5
     sqrt-iter::guess - 0.06772532736082602
     sqrt-iter::good-enough? - 0.0035867199661310497 ; #f
     ;; pass 6
     sqrt-iter::guess - 0.04124542607499115
     sqrt-iter::good-enough? - 0.0007011851721075595 ; #true, smaller
                                                     ; than our tolerance
                                                     ; of 0.001
   #+END_SRC

   We stop the recursion as 0.0007 is considered as good enough, but
   our guess is still far from the correct value.

   The problem with large numbers is different.

   A call to `(sqrt 99999999999999)' [length of 14] is nearly instant
   where a call to `(sqrt 999999999999999)' [length of 15] seems to
   not terminate.

   I am not sure to understand what is the exact reason of the
   misbehavior.

   Implementation of the alternative strategy :

   #+BEGIN_SRC scheme
     (define (better-good-enough? guess old-guess x)
       (< (* (/ (abs (- old-guess guess)) guess) 100)
          1)) ; 1% of the guess is a bit high, a smaller
              ; value will give more accurate results

     (define (better-sqrt-iter guess old-guess x)
       (if (better-good-enough? guess old-guess x)
           guess
           (better-sqrt-iter (improve guess x)
                             guess
                             x)))

     (define (better-sqrt x)
       (better-sqrt-iter 1.0 0 x))

     (better-sqrt 0.00000001)
     ;; expect: 0.003162278
     ;; result: 0.0031622926477232706

     (better-sqrt 99999999999999999999999)
     ;; expect: 316227766016.8379332
     ;; result: 316228342690.85913
   #+END_SRC

* Exercise 1.8
  Newton's method for cube roots is based on the fact that if y is
  an approximation to the cube root of x, then a better
  approximation is given by the value

  \begin{equation}
  \frac{\frac{x}{y^2} + 2y}
       {3}
  \end{equation}

  Use this formula to implement a cube-root procedure analogous to
  the square-root procedure.  (In section *Note 1-3-4:: we will see
  how to implement Newton's method in general as an abstraction of
  these square-root and cube-root procedures.)

** Answer
   #+BEGIN_SRC scheme
     (define (improve-cube guess x)
       (/ (+ (/ x (square guess))
             (* 2 guess))
          3))

     (define (cubrt-iter guess old-guess x)
       (if (better-good-enough? guess old-guess x)
           guess
           (cubrt-iter (improve-cube guess x)
                       guess
                       x)))

     (define (cubrt x)
       (cubrt-iter 1.0 0 x))
   #+END_SRC

* Exercise 1.9
  Each of the following two procedures defines a
  method for adding two positive integers in terms of the procedures
  `inc', which increments its argument by 1, and `dec', which
  decrements its argument by 1.

  #+BEGIN_SRC scheme
    (define (+ a b)
      (if (= a 0)
          b
          (inc (+ (dec a) b))))

    (define (++ a b)
      (if (= a 0)
          b
          (++ (dec a) (inc b))))
  #+END_SRC

  Using the substitution model, illustrate the process generated by
  each procedure in evaluating `(+ 4 5)'.  Are these processes
  iterative or recursive?



** Answer
*** Optional
    Implementations of `inc' and `dec' as they don't exist in racket

    #+BEGIN_SRC scheme
      (require (prefix-in base:: racket/base))

      (define (dec n)
        (base::- n 1))

      (define (inc n)
        (base::+ n 1))
    #+END_SRC

*** First procedure
    The first procedure is a recursive process. It generates a chain
    of call to the `inc' procedure to perform the addition.

    If we call it with `(+ 4 5)', the substitution model will be:
    #+BEGIN_SRC scheme
      (if (= 4 0)
          5
          (inc (if (= 3 0)
                   5
                   (inc (if (= 2 0)
                            5
                            (inc (if (= 1 0)
                                     5
                                     (inc (if (= 0 0)
                                              5)))))))))

    #+END_SRC

    then

    #+BEGIN_SRC scheme
      (inc (inc (inc (inc 5))))
      ;; result: 9
    #+END_SRC

*** Second procedure
    That one is an iterative process. At each iteration we update
    parameters and call again the `+' procedure with them. As it
    relies only on parameters passed to the `+' procedure, the last
    step `(+ 0 9)' could replace the whole process.

    Again, we call it with `(+ 4 5)', we will get the following
    substitution model:

    #+BEGIN_SRC scheme
      (if (= 4 0)
          5
          (if (= 3 0)
              6
              (if (= 2 0)
                  7
                  (if (= 1 0)
                      8
                      (if (= 0 0)
                          9)))))

      ;; result: 9
    #+END_SRC

* Exercise 1.10
  The following procedure computes a mathematical function called
  Ackermann's function.

  #+BEGIN_SRC scheme
    (define (A x y)
      (cond ((= y 0) 0)
            ((= x 0) (* 2 y))
            ((= y 1) 2)
            (else (A (- x 1)
                     (A x (- y 1))))))
  #+END_SRC

  What are the values of the following expressions?

  #+BEGIN_SRC scheme
    (A 1 10)

    (A 2 4)

    (A 3 3)
  #+END_SRC

  Consider the following procedures, where `A' is the procedure
  defined above:

  #+BEGIN_SRC scheme
    (define (f n) (A 0 n))

    (define (g n) (A 1 n))

    (define (h n) (A 2 n))

    (define (k n) (* 5 n n))
  #+END_SRC

  Give concise mathematical definitions for the functions computed
  by the procedures `f', `g', and `h' for positive integer values of
  n.  For example, `(k n)' computes 5n^{2}.

** Answer
   #+BEGIN_SRC scheme
    (A 1 10)
    ;; result: 1024

    (A 2 4)
    ;; result: 65536

    (A 3 3)
    ;; result: 65536
  #+END_SRC

   Procedures `f', `g' and `h' will computes:
   - `(f n)': 2n
   - `(g n)': 2^{n}
   - `(h n)': 2^{2^{...^{2}}} (n times)
