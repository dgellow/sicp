* Exercise 1.1
  Below is a sequence of expressions.  What is the
  result printed by the interpreter in response to each expression?
  Assume that the sequence is to be evaluated in the order in which
  it is presented.

  #+BEGIN_SRC scheme
    10
    ; result: 10
    (+ 5 3 4)
    ; result: 12
    (- 9 1)
    ; result: 8
    (/ 6 2)
    ; result: 3
    (+ (* 2 4) (- 4 6))
    ; result: 6

    (define a 3)
    ; result: a = 3

    (define b (+ a 1))
    ; result: b = 4

    (+ a b (* a b))
    ; result: 19

    (= a b)
    ; result: #f

    (if (and (> b a) (< b (* a b)))
        b
        a)
    ; result: 4, return b

    (cond ((= a 4) 6)
          ((= b 4) (+ 6 7 a))
          (else 25))
    ; result: 16, second clause

    (+ 2 (if (> b a) b a))
    ; result: 6

    (* (cond ((> a b) a)
             ((< a b) b)
             (else -1))
       (+ a 1))
    ; result: 16
  #+END_SRC

* Exercise 1.2
  Translate the following expression into prefix
  form.

  \begin{equation}
  \frac{5 + 4 + (2 - (3 - (6 + \frac{4}{5})))}
       {3(6 - 2)(2 - 7)}
  \end{equation}

** Answer
  #+BEGIN_SRC scheme
    (/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
       (* 3 (- 6 2) (- 2 7)))
  #+END_SRC

* Exercise 1.3
  Define a procedure that takes three numbers as
  arguments and returns the sum of the squares of the two larger
  numbers.

** Answer
  #+BEGIN_SRC scheme
    (define (square n)
      (* n n))

    (define (sum-of-squares-of-two-larger-numbers x y z)
      (+ (if (> x y)
             (square x)
             (square y))
         (if (> y z)
             (square y)
             (square z))))
  #+END_SRC

* Exercise 1.4
  Observe that our model of evaluation allows for
  combinations whose operators are compound expressions.  Use this
  observation to describe the behavior of the following procedure:

  #+BEGIN_SRC scheme
    (define (a-plus-abs-b a b)
      ((if (> b 0) + -) a b))
  #+END_SRC

  The `if' statement return a procedure based on the sign of `b'.
  If `b' is positive the `if' returns the function `+' which result
  in the addition of `a' and `b'.

  On the other side, if `b' is negative the `if' returns the function
  `-' and therefore will result in the addition of `a' and the opposite
  of `b'.

* Exercise 1.5
  Ben Bitdiddle has invented a test to determine
  whether the interpreter he is faced with is using
  applicative-order evaluation or normal-order evaluation.  He
  defines the following two procedures:

  #+BEGIN_SRC scheme
    (define (p) (p))

    (define (test x y)
      (if (= x 0)
          0
          y))

    (test 0 (p))
  #+END_SRC

  Then he evaluates the expression

  #+BEGIN_SRC scheme
    (test 0 (p))
  #+END_SRC

  What behavior will Ben observe with an interpreter that uses
  applicative-order evaluation?  What behavior will he observe with
  an interpreter that uses normal-order evaluation?  Explain your
  answer.  (Assume that the evaluation rule for the special form
  `if' is the same whether the interpreter is using normal or
  applicative order: The predicate expression is evaluated first,
  and the result determines whether to evaluate the consequent or
  the alternative expression.)

** Answer
*** applicative-order evaluation
    #+BEGIN_SRC scheme
      (if (= 0 0)
          0
          (p))
    #+END_SRC

    then

    #+BEGIN_SRC scheme
      (if (= 0 0)
          0
          ((p)))
    #+END_SRC

    and ...

    #+BEGIN_SRC scheme
      (if (= 0 0)
          0
          (((p)))) ; infinite loop
    #+END_SRC

    It will result in an infinite loop, `p' will always call himself
    recursively without any breaking statement.


*** normal-order evaluation
    #+BEGIN_SRC scheme
      (if (= 0 0)
          0
          (p))
    #+END_SRC

    then

    #+BEGIN_SRC scheme
      (if #t
          0
          (p))
    #+END_SRC

    and finally

    #+BEGIN_SRC scheme
      0
    #+END_SRC

* Exercise 1.6
  Alyssa P. Hacker doesn't see why `if' needs to be
  provided as a special form.  "Why can't I just define it as an
  ordinary procedure in terms of `cond'?" she asks.  Alyssa's friend
  Eva Lu Ator claims this can indeed be done, and she defines a new
  version of `if':

  #+BEGIN_SRC scheme
    (define (new-if predicate then-clause else-clause)
      (cond (predicate then-clause)
            (else else-clause)))
  #+END_SRC

  Eva demonstrates the program for Alyssa:

  #+BEGIN_SRC scheme
    (new-if (= 2 3) 0 5)
    ;; result: 5

    (new-if (= 1 1) 0 5)
    ;; result: 0
  #+END_SRC

  Delighted, Alyssa uses `new-if' to rewrite the square-root program:

  #+BEGIN_SRC scheme
    (define (sqrt-iter guess x)
      (new-if (good-enough? guess x)
              guess
              (sqrt-iter (improve guess x)
                         x)))
  #+END_SRC

  What happens when Alyssa attempts to use this to compute square
  roots?  Explain.

** Answer
   If the procedure `new-if` works as the special-form `if` the
   follwing statement should terminate immediately and return 1:

   #+BEGIN_SRC scheme
     (sqrt-iter 1 1)
   #+END_SRC

   Instead the process hangs and doesn't stop.

   The explication can be illustrated by expanding `sqrt-iter`
   using applicative-order evaluation or normal-order evulation
   (it doesn't matter which one, they will both encounter the same
   problem):

   #+BEGIN_SRC scheme
     ;; using applicative-order evaluation
     (new-if (good-enough? 1 1)
             1
             (sqrt-iter (improve 1 1)
                        1))
   #+END_SRC

   then

    #+BEGIN_SRC scheme
      (new-if #t
              1
              (sqrt-iter (improve 1 1)
                         1))
    #+END_SRC

   then

    #+BEGIN_SRC scheme
     (new-if #t
             1
             (sqrt-iter 1
                        1))

    #+END_SRC

   etc.

   #+BEGIN_SRC scheme
     (new-if #t
             1
             (new-if (good-enough? 1 1)
                     1
                     ; infinite loop
                     (sqrt-iter (improve 1 1)
                                1)))

   #+END_SRC

   When we use the procedure `new-if' the else-clause is
   evaluated whereas it is not necessary. In our case the
   recursive call of `sqrt-iter' will be expanded infinitely
   despite the fact that the predicate is true.

   If instead we use the special-form `if`, the else-clause is
   evaluated only if the predicate is false and therefore
   will not expand the recursive call of `sqrt-iter' when it
   is true.
